*ensime.txt*	A client for ENSIME, IDE-like features for Scala and Java.

Author:  Olivier 'yazgoo' Abdesselam
         Jorge Vicente Cantero (jvican)
         Chris Coffey (ChrisCoffey)
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

==============================================================================
CONTENTS                                                     *ensime-contents*

    Introduction..............................|ensime-introduction|
        Project Status........................|ensime-status|
        Getting Started.......................|ensime-getting-started|
    Commands..................................|ensime-commands|
        Debugger Commands.....................|ensime-debugger-commands|
        Refactoring Commands..................|ensime-refactoring-commands|
    Function API..............................|ensime-function-api|
    Usage.....................................|ensime-usage|
        Debugger..............................|ensime-debugger|
    Configuration.............................|ensime-configuration|
        Mappings..............................|ensime-mappings|
        Syntax Highlighting...................|ensime-syntax|
        Cookbook..............................|ensime-cookbook|
    Working with ENSIME Server................|ensime-server|
    Troubleshooting & FAQ.....................|ensime-troubleshooting-faq|

==============================================================================
INTRODUCTION                                    *ensime-introduction* *ensime*

ensime-vim is a plugin for using ENSIME in Vim to edit Scala and Java code
with powerful static type-aware features: https://ensime.org

The ENSIME server aims to provide IDE features to text editors, giving you
more choice of your favorite tools (like Vim!). It supports Scala and Java
and is platform-agnostic. Some notable features that ensime-vim currently
supports are:

    * Semantic completion
    * Go-to-definition
    * Type inspections, show type or hierarchy
      information of objects and expressions
    * Debugging (WIP)
    * Error reporting, automatically integrating
      with Syntastic if available
    * Refactorings: rename, inline local, more on the way
    * Auto-importing, organize imports
    * Documentation lookups, offline from local jars

and more, with new features being added regularly by an active community.

Note that ensime-vim is not a base |filetype-plugin| for Scala or Java --
you'll want to check out plugins like vim-scala for syntax highlighting,
indentation, etc.: https://github.com/derekwyatt/vim-scala

------------------------------------------------------------------------------
PROJECT STATUS                                                 *ensime-status*

This plugin is under active development and some features are not yet
supported (e.g. most of the refactorings, Java support). The |ensime-commands|
section provides an overview of most currently implemented features.

Hard work is being done in this area and soon those missing features will be
available for any Vim user. Contributions are also welcome!

------------------------------------------------------------------------------
GETTING STARTED                                       *ensime-getting-started*

If you're reading this, we assume you've gotten the Vim plugin and its
dependencies installed. If not, you can find the complete details here:

http://ensime.github.io/editors/vim/install/

After installing, there are a few first-time steps to follow in order to use
ENSIME with your first project.

                                                          *ensime-build-tools*
Install a plugin for your build tool~

You will first need to configure your build tool to generate project
configurations for ENSIME, similar to using `sbt-eclipse` or `sbt-idea`. There
are ENSIME plugins for a number of build tools, find yours and install it:

https://ensime.github.io/build_tools/

                                                           *ensime-dot-ensime*
Generate .ensime for your project~

Armed with your build tool plugin, generate the `.ensime` config from your
project directory, e.g. for sbt use `sbt ensimeConfig`, or `./gradlew ensime`
for Gradle.

                                                            *ensime-bootstrap*
Bootstrap ENSIME~

The first time you use ensime-vim (per Scala version), it will "bootstrap" the
ENSIME server installation for you--when opening a Scala file you will be
prompted to run |:EnInstall|. Do that and give it a minute or two to run.

After this, you should see reports in Vim's message area that ENSIME is coming
up, and the indexer and analyzer are ready. You're ready to go! Compile your
project and be sure to do so regularly as you work to keep ENSIME's knowledge
up-to-date.

Going forward, ensime-vim will automatically start the ENSIME server when you
edit Scala files in a project with an `.ensime` config present.

==============================================================================
COMMANDS                                                     *ensime-commands*

All commands are buffer-local, unless otherwise stated. This means you must
edit a Scala file (Java coming soon...) in order for the commands to be
available.

                                                                  *:EnInstall*
:EnInstall

    Bootstraps installation of the ENSIME server and starts it. Generally only
    needed on your first-time setup, or once per Scala version if you start
    working on another project with a different one.

                                                              *:EnDeclaration*
:EnDeclaration

    Go to the definition of the variable, method, type, or package under the
    cursor.

                                                         *:EnDeclarationSplit*
:EnDeclarationSplit [v]

    Go to the definition of the variable, method, type, or package under the
    cursor in a horizontal split.

    If [v] is given a vertical split is used instead.

                                                                *:EnDocBrowse*
:EnDocBrowse

    Opens documentation for the symbol under the cursor in a browser. This
    works offline using cached doc jars. See |ensime-custom-browser| to
    customize the browser used if heuristics don't pick the one you prefer.

                                                              *:EnInspectType*
:EnInspectType

    Displays type of the expression under the cursor, as well as its linear
    supertypes.

                                                                   *:EnSearch*
:EnSearch {term}

    Searches across the project and its dependencies for symbols matching
    {term}, loading results into the |quickfix| list. The term may be a
    substring match of the symbol name.

                                                                   *:EnSymbol*
:EnSymbol

    Displays file path where the symbol under the cursor is defined, within
    ENSIME's cached source jars for the project.
>
    TODO: don't see many practical use cases for this, if it's an
    implementation detail then hide it. Expose a function that returns it as a
    string, maybe.
<
                                                           *:EnToggleFullType*
:EnToggleFullType

    Toggles ENSIME between displaying shallow or qualified types. This will be
    visible in the output of type inspections like |:EnType|.

                                                                     *:EnType*
:EnType

    Without parameters it displays type of the expression under the cursor.
    If 'selection' parameter is included it displays the type of the expression
    enclosed by the last active visual selection.

                                                                *:EnTypeCheck*
:EnTypeCheck

    Runs a typecheck on file in the current buffer, displaying any errors and
    warnings in the buffer.

                                                                *:EnUsages*
:EnUsages

    Finds usages of the symbol under the cursor and loads them into the
    quickfix window for easy navigation.

                                                    *ensime-debugger-commands*
Debugger Commands~

                                                           *:EnDebugBacktrace*
:EnDebugBacktrace

    While debugging and execution is paused, opens a stack trace for the
    current frame in a new buffer.

                                                         *:EnDebugClearBreaks*
:EnDebugClearBreaks

    Clears all registered debugging breakpoints.

                                                            *:EnDebugContinue*
:EnDebugContinue

    Continues execution when debugging, after pausing at a breakpoint.

                                                               *:EnDebugStart*
:EnDebugStart {host} {port}

    Begins a debugger session by attaching to the host specified by {host} and
    {port}. See |ensime-debugger| for more detailed usage information.

                                                            *:EnDebugSetBreak*
:EnDebugSetBreak

    Set a debugging breakpoint on the current line. Note that the ENSIME
    server keeps track of the breakpoints, so they can be set before a
    debugging session is actually started (but they are not persisted across
    server restarts).

                                                                 *:EnDebugStep*
:EnDebugStep

    Steps to the next statement during a debugging session.

                                                                 *:EnDebugNext*
:EnDebugNext

    Steps over the next statemenet during a debugging session 

                                                                 *:EnDebugStepOut*
:EnDebugStepOut

    Goes to the next line, one stack frame above the current execution
    location.

                                                 *ensime-refactoring-commands*
Refactoring Commands~

                                                                *:EnAddImport*
:EnAddImport

    Prompts for a fully qualified import, adds it to the top of the file, and
    writes.

                                                                   *:EnInline*
:EnInline

    Performs an inline local refactoring for a value under the cursor, and
    writes the file.

                                                          *:EnOrganizeImports*
:EnOrganizeImports

    Organizes imports in the current file: removes unused ones, sorts, and
    groups `java` imports first, `scala` second, followed by third-party.

                                                                   *:EnRename*
:EnRename

    Performs a rename refactoring for the symbol under the cursor, and writes
    the file. Prompts for the new name.

                                                            *:EnSuggestImport*
:EnSuggestImport

    Presents a list of candidates for importing the symbol under the cursor.
    Upon confirmation, the selected import statement is added to the file.

==============================================================================
FUNCTION API                                             *ensime-function-api*

Documented functions are exposed for the scripting pleasure of advanced users.
Compose features in useful ways we haven't thought of.

Bear in mind that ensime-vim is in a relatively early stage of development and
APIs may change.
                                                            *EnCompleteFunc()*
EnCompleteFunc()

    Implements Vim's |new-omni-completion| functionality using the semantic
    completions from ENSIME (use CTRL-X CTRL-O). ensime-vim will set this as
    'omnifunc' automatically, but in case you need to wrestle with some
    conflicting plugin (Eclim, for example), now you know where to find it.

    Many as-you-type completion plugins like YouCompleteMe, neocomplete, or
    deoplete will hook into 'omnifunc' automatically, or ensime-vim may
    provide specific adapter support for them in some cases.
>
    TODO: we should namespace all exposed functions.

==============================================================================
USAGE                                                           *ensime-usage*

    Debugger               |ensime-debugger|

------------------------------------------------------------------------------
DEBUGGER                                                     *ensime-debugger*

ensime-vim's support for debugging features is an active work in progress.
Some features like stepping are not quite ready, but basic breakpoints and
stack inspection may work for you now.

To use the debugging features, you'll need to run your application (or tests)
in debug host mode using your build tool. We walk through a brief example
using sbt below -- if you use another build tool, we urge you to submit docs
on how to start and connect to a debug process to ENSIME's build tool pages:

http://ensime.github.io/build_tools/

To debug an application using sbt:

  1. You will want to set `fork := true` in your project's `build.sbt`.

  2. Run sbt, and enable processes to start in debug mode by executing the
     `debugging` command provided by sbt-ensime.

  3. Run a process you wish to debug, like with `run` or `testOnly`. You can
     set breakpoints in Vim before or after this with |:EnDebugSetBreak|.

  4. The host should now be waiting for a connection, shown in sbt's output.

  5. Connect with |:EnDebugStart|, e.g. `:EnDebugStart localhost 5005`

  6. Inspect state at your breakpoints with |:EnDebugBacktrace| (more
     inspections TBD), and |:EnDebugContinue| to proceed.

  6. When you've finished your session, reset `debuggingOff` in sbt.

For additional details, see the complete docs on the web:
http://ensime.github.io/build_tools/sbt/#debugging-example

==============================================================================
CONFIGURATION                                           *ensime-configuration*

ensime-vim so far has no settings in the form of global 'g:' variables. Yay
for thoughtful and non-intrusive defaults!

                                                       *ensime-custom-browser*
Using a Custom Browser~

The |:EnDocBrowse| command tries to make a good guess at how to open your
preferred browser on your platform (using the Python `webbrowser` module). If
you'd like to change it though, you can do so using a `BROWSER` environment
variable: >

    # In your shell config
    export BROWSER="firefox %s"

    " Or in your Vim config
    let $BROWSER = 'firefox %s'

The URL will be interpolated at the token "%s" in the value you set. For even
greater flexibility, it's possible to point to a script: >

    $ export BROWSER="/Users/ches/bin/vim-browser %s"
    $ chmod a+x ~/bin/vim-browser

where the contents of `vim-browser` are: >

    #!/bin/sh
    exec open -a Safari "$@"

An absolute path to the script may be required.

------------------------------------------------------------------------------
MAPPINGS                                                     *ensime-mappings*

Serious Vim users already have elaborate key mappings and strong opinions --
ensime-vim therefore doesn't set default mappings. Instead we present these
examples that you may apply or adapt for your own workflow.

The plugin's user interface is mostly commands currently. We intend to provide
<Plug> mappings in the future.

There are two typical approaches to filetype-specific mappings, either
autocommands like this in a monolithic `vimrc`: >

    autocmd FileType scala,java
          \ nnoremap <buffer> <silent> <LocalLeader>t :EnType<CR> |
          \ xnoremap <buffer> <silent> <LocalLeader>t :EnType selection<CR> |
          \ nnoremap <buffer> <silent> <LocalLeader>T :EnTypeCheck<CR>

or the equivalent simple mappings in a `$MYVIMRUNTIME/after/ftplugin` file: >

    " ~/.vim/after/ftplugin/scala.vim
    nnoremap <buffer> <silent> <LocalLeader>t :EnType<CR>
    xnoremap <buffer> <silent> <LocalLeader>t :EnType selection<CR>
    nnoremap <buffer> <silent> <LocalLeader>T :EnTypeCheck<CR>

This is a matter of preference. The former may be easier for sharing common
settings between Scala and Java, unless you use |:runtime| to include one file
in another.

Besides the above, here are a few more suggested mappings to get you started:
>
    nnoremap <buffer> <silent> K  :EnDocBrowse<CR>
    nnoremap <buffer> <silent> gd :EnDeclaration<CR>

    nnoremap <buffer> <silent> <C-]>  :EnDeclaration<CR>
    nnoremap <buffer> <silent> <C-w>] :EnDeclarationSplit<CR>
    nnoremap <buffer> <silent> <C-w><C-]> :EnDeclarationSplit<CR>
    nnoremap <buffer> <silent> <C-v>] :EnDeclarationSplit v<CR>

    nnoremap <buffer> <silent> <LocalLeader>i :EnInspectType<CR>
    nnoremap <buffer> <silent> <LocalLeader>I :EnSuggestImport<CR>
    nnoremap <buffer> <silent> <LocalLeader>r :EnRename<CR>

Some of these mimic and shadow default Vim mappings that are semantically
similar, for familiarity. You could add a prefix if you don't like this.

------------------------------------------------------------------------------
SYNTAX HIGHLIGHTING                                            *ensime-syntax*

If you would like to use another highlight style for errors, use: >

    :let EnErrorStyle='YourHighlight'

For example: >

    :let EnErrorStyle='Underlined'

------------------------------------------------------------------------------
COOKBOOK                                                     *ensime-cookbook*

Trigger automatic typechecks on each file write~
>
    :autocmd BufWritePost *.scala :EnTypeCheck

This triggers type checks after each buffer write of a Scala file. Check
|autocmd-events-abc| for a comprehensive event list.

==============================================================================
WORKING WITH ENSIME SERVER                                     *ensime-server*

To trigger an update of ENSIME server, nuke the bootstrap project: >

    $ rm -rf ~/.config/ensime-vim/<your Scala version>

Restart Vim and run |:EnInstall|.

If you're debugging an issue or working on implementing a new feature, you'll
find the logs useful -- relative to your project, check: >

    .ensime_cache/ensime-vim.log
    .ensime_cache/server.log

==============================================================================
TROUBLESHOOTING AND FAQ                           *ensime-troubleshooting-faq*

First and foremost, see the troubleshooting docs on the web for the most
current information:

https://ensime.github.io/editors/vim/troubleshooting/

Ensime Server Won’t Start~

The server will fail to start if any of these files still exist in the
`.ensime_cache` directory: `http`, `port`, `server.pid`. If you don’t see ENSIME
running but those files are present, delete them and you should be all set.

I get an error that "ensime_plugin is not defined", or there are no :En*~
commands in Vim.~

If you’re using NeoVim, try `:UpdateRemotePlugins`.

If not, or that didn’t fix the problem, ensure you installed the Python
dependencies: >

    $ pip install websocket-client sexpdata

Also, confirm that the version of Python your Vim is built with is the same
one that you’re running pip install with. Check: >

    :py import sys; print(sys.path)

and
>
    $ pip show sexpdata | grep Location
<
Debug Logging~

You can enable much more verbose logging that may be useful for
troubleshooting or plugin development. This is done with an environment
variable, `ENSIME_VIM_DEBUG` -- enable this in your vimrc with: >

    let $ENSIME_VIM_DEBUG = 1

or simply start Vim with e.g. `ENSIME_VIM_DEBUG=1 vim myfile.scala` and
inspect `.ensime_cache/ensime-vim.log` in your project.

 vim:tw=78:et:sw=4:ts=4:ft=help:norl:
